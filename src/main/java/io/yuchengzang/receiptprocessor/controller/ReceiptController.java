package io.yuchengzang.receiptprocessor.controller;

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.validation.annotation.Validated;

import jakarta.validation.Valid;
import org.hibernate.validator.constraints.UUID;

import io.yuchengzang.receiptprocessor.service.ReceiptPointsService;
import io.yuchengzang.receiptprocessor.repository.ReceiptRepository;
import io.yuchengzang.receiptprocessor.model.Receipt;

@Validated
@RestController
@RequestMapping("/receipts")
/**
 * The ReceiptController class is a REST controller for handling receipt-related operations.
 */
public class ReceiptController {

  // Create a logger for the ReceiptController class
  private static final Logger logger = LoggerFactory.getLogger(ReceiptController.class);

  // Create a repository and a service for the controller
  private final ReceiptRepository receiptRepository;
  private final ReceiptPointsService receiptPointsService;

  // Constructor injection for the service and repository
  public ReceiptController(
      ReceiptRepository receiptRepository,
      ReceiptPointsService receiptPointsService
  ) {
    this.receiptRepository = receiptRepository;
    this.receiptPointsService = receiptPointsService;
  }

  /**
   * Add a receipt to the repository.
   *
   * This is mapped to the /receipts/process endpoint's POST method. Note that even though this API
   * endpoint is named "process", it is actually used to add a receipt to the repository. The points
   * calculation is done by the "/receipts/{id}/points" endpoint, allowing for lazy calculation of
   * points.
   *
   * @param receipt The receipt to be added to the system. This should be a JSON object representing
   *                the receipt, but the ID field of the incoming receipt will be ignored and will
   *                be ignored and generated by the system.
   * @return A response entity containing the ID of the receipt that was added.
   */
  @PostMapping("/process")
  public ResponseEntity<Object> addReceipt(@Valid @RequestBody Receipt receipt) {
    try {
      // Log the receipt ID received
      logger.info("Received receipt with ID '{}'.", receipt.getId());

      // Save the receipt to the repository
      receiptRepository.save(receipt);

      // Log the successful addition of the receipt
      logger.info("Receipt with ID '{}' processed successfully.", receipt.getId());

      // Return a success response with HTTP 201 Created
      return ResponseEntity.status(HttpStatus.OK).body(Map.of("id", receipt.getId()));
    } catch (Exception e) {
      logger.error("Failed to save receipt due to '{}'", e.getMessage());
      return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
          .body(Map.of("error", "Failed to process the receipt"));
    }
  }

  /**
   * Get the receipt points for a given receipt ID.
   *
   * This is mapped to the /receipts/{id}/points endpoint's GET method. This endpoint calculates the
   * points for a receipt and returns the points as a response. The points are calculated based on
   * the items in the receipt and the purchase date.
   *
   * @param id The ID of the receipt for which the points are to be calculated.
   * @return A response entity containing the points for the receipt.
   */
  @GetMapping("/{id}/points")
  public ResponseEntity<Object> getReceiptPoints(@UUID(message = "Invalid UUID") @PathVariable String id) {
    try {
      // Log the receipt ID received
      logger.info("Received ID for points calculation request: '{}'", id);

      // Get the receipt from the repository
      Receipt receipt = receiptRepository.findById(id);

      // Check if the given receipt ID exists in the repository
      if (receipt == null) {
        return ResponseEntity.status(HttpStatus.NOT_FOUND)
            .body(Map.of("error", "Receipt not found"));
      }

      // Calculate the points for the receipt
      int points = receiptPointsService.calculatePoints(receipt);

      // Log the successful calculation of points
      logger.info("Points calculated for receipt with ID '{}': '{}'", id, points);

      // Return the points as a response
      return ResponseEntity.ok(Map.of("points", points));
    } catch (Exception e) {
      logger.error("Failed to calculate points for receipt '{}' due to '{}'", id, e.getMessage());
      return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
          .body(Map.of("error", "Failed to calculate points for the receipt"));
    }
  }
}
